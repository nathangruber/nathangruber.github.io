{"entries":[
{
	"date":"04/10/2016", 
	"title":"Deep Thoughts with Nate Gruber on Javascript scope", 
	"text":"<p class=\"blogPosts\">I wanted to share the knowledge I learned today about Javascript Scope and Closures. I found the tutorial on W3 schools very informative. In Javascript variables can belong to the local or global scope. A local variable can only be used inside the function where it is defined. It is hidden from other functions and other scripting code. Global and local variables with the same name are different variables. Modifying one, does not modify the other. Private variables can be made possible with closures in Javascript. My deep thought on this is that you should know this.<\/p>"
},
{
	"date":"04/13/2016", 
	"title":"Deep Thoughts with Nate Gruber on the <i>this</i> keyword in Javascript", 
	"text":"<p class=\"blogPosts\">The <i>this</i> keyword in Javascript can be very confusing to a new developer. The javascript.isSexy blog explains it well. The blog runs through the basics, and clearly defines the different uses for the keyword. I read this post so I can understand the keyword better because I am starting to use Object Oriented Programming in Javascript. If you are in a similar situation or just want to review it is an excellent blog. The blog was written in 2013, but remains spot on. My deep thoughts on the <i>this</i> keyword is that it is vital to know if you are going to use OOP in Javascript or other coding languages.<\/p>"
},
{
	"date":"04/21/2016", 
	"title":"Deep Thoughts with Nate Gruber on Javascript inheritance", 
	"text":"<p class=\"blogPosts\">Inheritance is a very important aspect of many programming languages, Javascript is not any different. Douglas Crockford breaks down Inheritance very well in his book, \"Javascript the Good Parts.\" Inheritance in programming has its benefits. The two main benefits of inheritance the Crockford talks about are, it allows you to reuse code. This creates less and more readable code for applications, in turn saves time in the development process. The other main benefit is that it includes the specification of system types. This means that programmers can freely write specific casting operations, which makes the process safer for the programmers because a type system can be lost. Javasctipt never casts, the lineage of the object does not matter. What the object does is what matters and Crockford breaks this down beautifully. Crockford's chapter then goes into the other inheritance patterns that you can use in Javascript. My Deep Thoughts on this are that anyone who is learning Javascript OOP or wants to review it should read Douglas Crockford's chapter on inheritance in his book, \"Javascript the Good Parts.\"<\/p>"
},
{
	"date":"04/10/2016", 
	"title":"Deep Thoughts", 
	"text":"<p class=\"blogPosts\">Here are my thoughts and recommendations.Here are my thoughts and recommendations.Here are my thoughts and recommendations.Here are my thoughts and recommendations.Here are my thoughts and recommendations.Here are my thoughts and recommendations.Here are my thoughts and recommendations.Here are my thoughts and recommendations.Here are my thoughts and recommendations.Here are my thoughts and recommendations.Here are my thoughts and recommendations.Here are my thoughts and recommendations.Here are my thoughts and recommendations.Here are my thoughts and recommendations.Here are my thoughts and recommendations.Here are my thoughts and recommendations.Here are my thoughts and recommendations.Here are my thoughts and recommendations.Here are my thoughts and recommendations.Here are my thoughts and recommendations.Here are my thoughts and recommendations.word.<\/p>"
},
{
	"date":"04/10/2016", 
	"title":"Deep Thoughts", 
	"text":"<p class=\"blogPosts\">Here positive are my thoughts and recommendations.Here are my thoughts and recommendations.Here are my thoughts and recommendations.Here are my thoughts and recommendations.Here are my thoughts and recommendations.Here are my thoughts and recommendations.Here are my thoughts and recommendations.Here are my thoughts and recommendations.Here are my thoughts and recommendations.Here are my thoughts and recommendations.Here are my thoughts and recommendations.Here are my thoughts and recommendations.Here are my thoughts and recommendations.Here are my thoughts and recommendations.Here are my thoughts and recommendations.Here are my thoughts and recommendations.Here are my thoughts and recommendations.Here are my thoughts and recommendations.Here are my thoughts and recommendations.Here are my thoughts and recommendations.Here are my thoughts and recommendations.word.<\/p>"
}
]}